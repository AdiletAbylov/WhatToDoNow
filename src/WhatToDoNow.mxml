<?xml version="1.0" encoding="utf-8"?>
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	persistNavigatorState="true" 
	navigatorStateSaving="onPersisting(event)" 
	navigatorStateLoading="onRestoring(event)"
	applicationComplete="onApplicationComplete()">

	<fx:Script>
		<![CDATA[
			import business.DBService;
			
			import mx.events.FlexEvent;

		
			protected function onApplicationComplete():void
			{
				// Handle orientation change events if auto-orient is true
				if (stage.autoOrients)
				{
					this.stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, onOrientationChange);
				}

				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);
				initLocalDatabase();
			}

			// Handle device orientation changes
			protected function onOrientationChange(event:StageOrientationEvent):void
			{
				trace("Orientation changed from " + event.beforeOrientation + " to " + event.afterOrientation);
				switch (event.afterOrientation)
				{
					case StageOrientation.DEFAULT:
						trace("Default orientation");
						break;
					case StageOrientation.ROTATED_RIGHT:
						trace("Rotated right");
						break;
					case StageOrientation.ROTATED_LEFT:
						trace("Rotated left");
						break;
					case StageOrientation.UPSIDE_DOWN:
						trace("Upside down");
						break;
					case StageOrientation.UNKNOWN:
						trace("Unknown");
						break;
				}
			}

			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
    			e.preventDefault();
    			trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}

			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}

			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
			}
			
			private function initLocalDatabase():void
			{
				DBService.instance.initDatabase();
			}
			
		]]>
	</fx:Script>

	<s:ViewNavigator label="ToDo Now" firstView='views.WhatToDoNowHome' width="100%" height="100%"/>
	<s:ViewNavigator label='Tasks' firstView='views.list' width="100%" height="100%"/>
	<s:ViewNavigator label='Settings' firstView='views.settings' width="100%" height="100%"/>
</s:TabbedViewNavigatorApplication>